import nextcord as discord
from nextcord.ext import tasks, commands
import sys
import random
from random import choice
import asyncio
import time
import pymongo


sys.path.append("..")
from ai3 import functions as funs
import config

client = funs.mongo_c()
db = client.bot
backs = db.bs
servers = db.servers


class economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    @commands.command(usage = '(met) (@member) (amout) (met2)', description = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    async def edit_user(self,ctx, met:str, member:discord.Member, amout:int, met2:str):
        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        server = servers.find_one({"server": ctx.guild.id})

        if amout <= 0:
            await ctx.send(f"–í–æ–∑—å–º–∏ –æ–¥–Ω–æ —è–±–ª–æ–∫–æ –∏ –¥–æ–±–∞–≤—å –∫ –Ω–µ–º—É {amout} —è–±–ª–æ–∫. –ï—Å—Ç—å —Ç—É—Ç —Å–º—ã—Å–ª?")
            return
        if met in ['money', 'lvl', 'xp', 'hp', 'hpmax', 'mana', 'manamax']:
            user = funs.user_check(member, ctx.guild)
            if met2 == 'add' or met2 == 'remove':
                if met2 == 'add':
                    funs.user_update(member.id, ctx.guild, met, user[met] + amout)
                if met2 == 'remove':
                    if user[met] - amout <= 0:
                        funs.user_update(member.id, ctx.guild, met, 0)
                    else:
                        funs.user_update(member.id, ctx.guild, met, user[met] - amout)
            else:
                await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ add/remove")
                return

            user = funs.user_check(member, ctx.guild)
            emb = discord.Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–±–Ω–æ–≤–ª—ë–Ω", description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {met}\n–ú–µ—Ç–æ–¥: {met2}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[met]}",color=server['embed_color'])
            await ctx.send(embed = emb)

        else:
            await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã –∏–∑–º–µ–Ω—è—Ç–µ—Ç–µ bank/money/lvl/xp/hp/hpmax/mana/manamax")


    @commands.command(usage = '(@member) (amout)', description = '–ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.', help = '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', aliases = ['–¥–∞—Ç—å_–º–æ–Ω–µ—Ç—ã'])
    async def give_money(self,ctx,member:discord.Member, amout):
        if ctx.author.id == member.id:
            await ctx.send(f"–ï—Å—Ç—å —Å–º—ã—Å–ª –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ?")
            return

        if amout != 'all' and int(amout) <= 0:
            await ctx.send(f"–í–æ–∑—å–º–∏ –æ–¥–Ω–æ —è–±–ª–æ–∫–æ –∏ –¥–æ–±–∞–≤—å –∫ –Ω–µ–º—É {amout} —è–±–ª–æ–∫. –ï—Å—Ç—å —Ç—É—Ç —Å–º—ã—Å–ª?")
            return

        user = funs.user_check(ctx.author, ctx.guild)

        if amout == 'all':
            amout = user['money']

        try:
            amout = int(amout)
        except Exception:
            await ctx.send("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ all")
            return

        if user['money'] < amout:
            await ctx.send(f"–£ –≤–∞—Å –Ω–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤ –∫–æ—à–µ–ª—å–∫–µ!")
            return

        user2 = funs.user_check(member, ctx.guild)

        funs.user_update(ctx.author.id, ctx.guild, "money", user['money'] - amout)
        funs.user_update(member.id, ctx.guild, "money", user2['money'] + amout)

        emb = discord.Embed(description=f"{ctx.author.mention} –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {member.mention} {amout} –º–æ–Ω–µ—Ç!", color=0x450fa8)
        emb.set_author(name = "–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
        await ctx.send(embed = emb)

    @commands.command(usage = '(@member)', description = '–°–±—Ä–æ—Å –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    async def reset_money(self,ctx, member:discord.Member):
        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        funs.user_update(member.id, ctx.guild, "money", 0)
        server = servers.find_one({"server": ctx.guild.id})

        emb = discord.Embed(description=f"–í—Å–µ –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã!", color=server['embed_color'])
        await ctx.send(embed = emb)

    @commands.command(usage = '-', description = '–°–±—Ä–æ—Å –º–æ–Ω–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    async def reset_economy(self,ctx):
        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        server = servers.find_one({"server": ctx.guild.id})
        for user in server['users']:
            funs.user_update(user, ctx.guild, "money", 0)

        emb = discord.Embed(description=f"–≠–∫–æ–Ω–æ–º–∏–∫–∞ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!", color=0x450fa8)
        await ctx.send(embed = emb)

    @commands.command(aliases=['top','–ª–∏–¥–µ—Ä—ã','—Ç–æ–ø'], usage = '(name) [number_page]', description = '–õ–∏–¥–µ—Ä—ã.', help = '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ')
    async def leaderboard(self,ctx, topname:str = 'lvl', numberpage:int = 1):
        if topname not in ['lvl', 'money', 'voice']:
            await ctx.send("–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–ø! (lvl, money, voice)")
            return

        server = servers.find_one({"server": ctx.guild.id})
        cc = server['economy']['currency']

        solutions = ['‚óÄ', '‚ñ∂', 'üì±', '‚ùå']
        member = ctx.author
        reaction = 'a'

        met = 'pc'

        if topname == 'lvl':
            top = list(sorted(server['users'].items(),key=lambda x: x[1]['lvl'],reverse=True))
        elif topname == 'money':
            top = list(sorted(server['users'].items(),key=lambda x: x[1]['money'],reverse=True))
        elif topname == 'voice':
            top = list(sorted(server['users'].items(),key=lambda x: x[1]['voice_time'],reverse=True))

        if len(top) % 5 != 0:
            l = int(len(top) / 5 + 1)
        else:
            l = int(len(top) / 5)

        if numberpage > l or numberpage < 1:
            await ctx.send("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç!")
            return

        def top_embed(numberpage):
            nonlocal ctx
            nonlocal cc
            nonlocal l
            nonlocal met

            num1 = 0
            num2 = 0
            page = numberpage
            text = ''

            if numberpage != 1:
                numberpage *= 5
                numberpage -= 5

                if numberpage > 4:
                    numberpage += 1

            if len(top) <= 5:
                if topname == 'lvl':
                    emb = discord.Embed(title = '–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        user_lvl = i[1]['lvl']
                        user_name = ctx.guild.get_member(int(i[0]))
                        if met == 'tel':
                            if num1 == 1:
                                text += '<:gold_s:929729448746549308> '
                            elif num1 == 2:
                                text += '<:silver_s:929729593286484029> '
                            elif num1 == 3:
                                text += '<:bronze_s:929729607836520448> '

                            text += f'**#{num1}. {user_name}\n–£—Ä–æ–≤–µ–Ω—å:** {user_lvl} <:lvl:886876034149011486>\n\n'
                        if met == 'pc':
                            emb.add_field(name = '```        –ú–µ—Å—Ç–æ        ```', value = f'```{num1}```')
                            emb.add_field(name = '```             –ò–º—è             ```', value = f'```{user_name}```')
                            emb.add_field(name = '```    –£—Ä–æ–≤–µ–Ω—å    ```', value = f'```{user_lvl}```')

                elif topname == 'money':
                    emb = discord.Embed(title = f'–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º {cc}', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        user_m = i[1]['money']
                        user_name = ctx.guild.get_member(int(i[0]))
                        if met == 'tel':
                            if num1 == 1:
                                text += '<:gold_s:929729448746549308> '
                            elif num1 == 2:
                                text += '<:silver_s:929729593286484029> '
                            elif num1 == 3:
                                text += '<:bronze_s:929729607836520448> '

                            text += f'**#{num1}. {user_name}\n–ú–æ–Ω–µ—Ç—ã:** {user_m}{cc}\n\n'
                        if met == 'pc':
                            emb.add_field(name = '```        –ú–µ—Å—Ç–æ        ```', value = f'```{num1}```')
                            emb.add_field(name = '```             –ò–º—è             ```', value = f'```{user_name}```')
                            emb.add_field(name = '```     –ú–æ–Ω–µ—Ç—ã     ```', value = f'```{user_m}```')

                elif topname == 'voice':
                    emb = discord.Embed(title = '–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤–æ–π—Å–µ', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        user_v = funs.time_end(i[1]['voice_time'])
                        user_name = ctx.guild.get_member(int(i[0]))
                        if met == 'tel':
                            if num1 == 1:
                                text += '<:gold_s:929729448746549308> '
                            elif num1 == 2:
                                text += '<:silver_s:929729593286484029> '
                            elif num1 == 3:
                                text += '<:bronze_s:929729607836520448> '

                            text += f'**#{num1}. {user_name}:\n–í—Ä–µ–º—è:** {user_v}\n\n'
                        if met == 'pc':
                            emb.add_field(name = '```        –ú–µ—Å—Ç–æ        ```', value = f'```{num1}```')
                            emb.add_field(name = '```             –ò–º—è             ```', value = f'```{user_name}```')
                            emb.add_field(name = '```     –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å     ```', value = f'```{user_v}```')

            elif len(top) > 5:
                if topname == 'lvl':
                    emb = discord.Embed(title = '–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        if num1 >= numberpage and num2 < 5:
                            num2 += 1
                            user_lvl = i[1]['lvl']
                            user_name = ctx.guild.get_member(int(i[0]))
                            if met == 'tel':
                                if num1 == 1:
                                    text += '<:gold_s:929729448746549308> '
                                elif num1 == 2:
                                    text += '<:silver_s:929729593286484029> '
                                elif num1 == 3:
                                    text += '<:bronze_s:929729607836520448> '

                                text += f'**#{num1}. {user_name}\n–£—Ä–æ–≤–µ–Ω—å:** {user_lvl} <:lvl:886876034149011486>\n\n'
                            if met == 'pc':
                                emb.add_field(name = '```       –ú–µ—Å—Ç–æ       ```', value = f'```{num1}```')
                                emb.add_field(name = '```         –ò–º—è         ```', value = f'```{user_name}```')
                                emb.add_field(name = '```    –£—Ä–æ–≤–µ–Ω—å    ```', value = f'```{user_lvl}```')

                elif topname == 'money':
                    emb = discord.Embed(title = '–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        if num1 >= numberpage and num2 < 5:
                            num2 += 1
                            user_m = i[1]['money']
                            user_name = ctx.guild.get_member(int(i[0]))
                            if met == 'tel':
                                if num1 == 1:
                                    text += '<:gold_s:929729448746549308> '
                                elif num1 == 2:
                                    text += '<:silver_s:929729593286484029> '
                                elif num1 == 3:
                                    text += '<:bronze_s:929729607836520448> '

                                text += f'**#{num1}. {user_name}\n–ú–æ–Ω–µ—Ç—ã:** {user_m}{cc}\n\n'
                            if met == 'pc':
                                emb.add_field(name = '```        –ú–µ—Å—Ç–æ        ```', value = f'```{num1}```')
                                emb.add_field(name = '```             –ò–º—è             ```', value = f'```{user_name}```')
                                emb.add_field(name = '```     –ú–æ–Ω–µ—Ç—ã     ```', value = f'```{user_m}```')

                elif topname == 'voice':
                    emb = discord.Embed(title = f'–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–æ—Å—Ç–∏ –≤ –≤–æ–π—Å–µ', description = '',color=0x450fa8)
                    for i in top:
                        num1 += 1
                        if num1 >= numberpage and num2 < 5:
                            num2 += 1
                            user_v = funs.time_end(i[1]['voice_time'])
                            user_name = ctx.guild.get_member(int(i[0]))
                            if met == 'tel':
                                if num1 == 1:
                                    text += '<:gold_s:929729448746549308> '
                                elif num1 == 2:
                                    text += '<:silver_s:929729593286484029> '
                                elif num1 == 3:
                                    text += '<:bronze_s:929729607836520448> '

                                text += f'**#{num1}. {user_name}:\n–í—Ä–µ–º—è:** {user_v}\n\n'
                            if met == 'pc':
                                emb.add_field(name = '```        –ú–µ—Å—Ç–æ        ```', value = f'```{num1}```')
                                emb.add_field(name = '```             –ò–º—è             ```', value = f'```{user_name}```')
                                emb.add_field(name = '```     –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å     ```', value = f'```{user_v}```')

            if met == 'tel':
                emb.add_field(name = '_ _', value = text)
            emb.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{l}")
            emb.set_thumbnail(url = "https://img.icons8.com/nolan/2x/prize.png")
            return emb


        msg = await ctx.send(embed = top_embed(numberpage))

        def check( reaction, user):
            nonlocal msg
            return user == ctx.author and str(reaction.emoji) in solutions and str(reaction.message) == str(msg)

        async def rr():
            nonlocal reaction
            nonlocal numberpage
            nonlocal l
            nonlocal met
            if str(reaction.emoji) == '‚óÄ':
                await msg.remove_reaction('‚óÄ', member)
                numberpage -= 1
                if numberpage < 1:
                    numberpage = 1

                await msg.edit(embed = top_embed(numberpage))


            elif str(reaction.emoji) == '‚ñ∂':
                await msg.remove_reaction('‚ñ∂', member)
                numberpage += 1
                if numberpage > l:
                    numberpage = l

                await msg.edit(embed = top_embed(numberpage))

            elif str(reaction.emoji) == 'üì±':
                await msg.remove_reaction('üì±', member)
                if met == 'pc':
                    met = 'tel'
                else:
                    met = 'pc'
                await msg.edit(embed = top_embed(numberpage))

            elif str(reaction.emoji) == '‚ùå':
                await msg.clear_reactions()
                return

        async def reackt():
            nonlocal reaction
            try:
                reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check = check)
            except asyncio.TimeoutError:
                await msg.clear_reactions()
            else:
                await rr(), await reackt()

        for x in solutions:
            await msg.add_reaction(x)
        await reackt()

    @commands.command(usage = '-', description = '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω.', help = '–ú–∞–≥–∞–∑–∏–Ω')
    async def add_product(self,ctx):

        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        server = servers.find_one({"server": ctx.guild.id})

        if server['premium'] == True:
            premit = 100
        else:
            premit = 50

        if len(server['economy']['gl_shop']) > premit:
            await ctx.send(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ({premit})')
            return

        product = {}

        def embed(items = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', price = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', description = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', access_role = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', access_balance = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'):
            nonlocal server

            emb = discord.Embed(description = "**–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**", color=server['embed_color'])

            if items != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' and items != "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ü—Ä–∏–º–µ—Ä: 1 23 1":
                emb.add_field(name = "–ü–æ–∫—É–ø–∞–µ–º—ã–µ(–π) –ø—Ä–µ–¥–º–µ—Ç(—ã)", value = ', '.join(str(x) for x in items))
            else:
                emb.add_field(name = "–ü–æ–∫—É–ø–∞–µ–º—ã–µ(–π) –ø—Ä–µ–¥–º–µ—Ç(—ã)", value = items)

            emb.add_field(name = "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", value = name)
            emb.add_field(name = "–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", value = price)
            emb.add_field(name = "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", value = description)
            emb.add_field(name = "–¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏", value = access_role)
            emb.add_field(name = "–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏", value = access_balance)
            emb.set_footer(text = '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–µ–∏ –∫–æ–º–∞–Ω–¥, –Ω–∞ –æ–¥–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ —É –≤–∞—Å 60 —Å–µ–∫.')

            return emb

        message = await ctx.send(embed = embed())

        try:
            await message.edit(embed = embed( "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ü—Ä–∏–º–µ—Ä: 1 23 1" ))
            ms2 = await ctx.send(embed = discord.Embed(title = "–ü—Ä–µ–¥–º–µ—Ç—ã", description = f"–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã {ctx.prefix}create_item\n–ü–æ—Å–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.\n–ß—Ç–æ –±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ id –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: 1 1 3 (–ø–æ–∫—É–ø–∞—Ç—å –ø–æ–ª—É—á–µ—Ç 2 –ø—Ä–µ–¥–º–µ—Ç–∞ —Å id 1 –∏ 1 –ø—Ä–µ–¥–º–µ—Ç —Å id 3)", color=server['embed_color']))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
                await ms2.delete()
            except Exception:
                pass

            act = []
            try:
                try:
                    act1 = msg.content.split()
                    for i in act1:
                        act.append(int(i))
                except Exception:
                    await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å __—á–∏—Å–ª–æ__, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—â—ë —Ä–∞–∑.")
                    return
                for i in act:
                    server['items'][str(i)]
            except Exception:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å __id__ (—á–∏—Å–ª–æ) —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—â—ë —Ä–∞–∑.")
                return


            product.update({ 'items': act })

        try:
            await message.edit(embed = embed(product['items'], f'–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)'))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
            except Exception:
                pass
            if len(message.content) > 50:
                await ctx.send("–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 50-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤")
                return
            product.update({ 'name': msg.content})

        try:
            await message.edit(embed = embed(product['items'], product['name'], f"–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å `{product['name']}`"))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
            except Exception:
                pass

            try:
                act = int(msg.content)
            except Exception:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å __—á–∏—Å–ª–æ__!")
                return

            product.update({ 'price': act})

        try:
            await message.edit(embed = embed(product['items'], product['name'], f"{server['economy']['currency']}{product['price']}", f'–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ `none`: (–º–∞–∫—Å 150 —Å–∏–º–≤–æ–ª–æ–≤)'))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
            except Exception:
                pass
            description = str(msg.content)
            if description == 'none':
                product.update({ 'description': None})
            elif len(description) > 0 and len(description) < 151:
                product.update({ 'description': msg.content})
            else:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ `none`, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—â—ë —Ä–∞–∑!")
                return

        try:
            await message.edit(embed = embed(product['items'], product['name'], f"{server['economy']['currency']}{product['price']}", product['description'], f"–£–∫–∞–∂–∏—Ç–µ [id](https://support.discord.com/hc/ru/articles/206346498-%D0%93%D0%B4%D0%B5-%D0%BC%D0%BD%D0%B5-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-ID-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F-) —Ä–æ–ª–∏ —Ç—Ä–µ–±—É–µ–º–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ `none`"))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
            except Exception:
                pass

            if msg.content == 'none':
                product.update({ 'access_role': None})

            else:
                try:
                    act = int(msg.content)
                except Exception:
                    await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å id —Ä–æ–ª–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—â—ë —Ä–∞–∑.")
                    return
                role = ctx.guild.get_role(act)
                try:
                    act = role.id
                except Exception:
                    await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ—â—ë —Ä–∞–∑.")
                    return

                product.update({ 'access_role': act})

        try:
            await message.edit(embed = embed(product['items'], product['name'], f"{server['economy']['currency']}{product['price']}", product['description'], product['access_role'], "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ `none`"))
            msg = await self.bot.wait_for('message', timeout=60.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
            return
        else:
            try:
                await msg.delete()
            except Exception:
                pass

            if msg.content == 'none':
                product.update({ 'access_balance': None})
            else:
                try:
                    act = int(msg.content)
                except Exception:
                    await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å __—á–∏—Å–ª–æ__!")
                    return

                product.update({ 'access_balance': act})

        try:
            l = server['economy']['gl_shop']
            list = []
            for i in l.keys():
                list.append(int(i))
            l = max(list)+1
        except Exception:
            l = 1

        await message.edit(embed = embed(product['items'], product['name'], f"{server['economy']['currency']}{product['price']}", product['description'], product['access_role'], product['access_balance']))

        await ctx.send(f"–ü—Ä–µ–¥–º–µ—Ç —Å id {l} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!")

        server = servers.find_one({"server": ctx.guild.id})
        il = server['economy']
        il['gl_shop'].update({f'{l}': product})
        servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

    @commands.command(usage = '(id)', description = '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.', help = '–ú–∞–≥–∞–∑–∏–Ω')
    async def remove_product(self,ctx, id:int):
        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        server = servers.find_one({"server": ctx.guild.id})
        il = server['economy']

        try:
            del il['gl_shop'][str(id)]
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})
            await ctx.send("–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º id –±—ã–ª —É–¥–∞–ª—ë–Ω")
        except KeyError:
            await ctx.send("–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è id")

    @commands.command(usage = '(id) (key) (args)', description = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.', help = '–ú–∞–≥–∞–∑–∏–Ω')
    async def edit_product(self,ctx, id:int, key, *args):
        if funs.roles_check(ctx.author, ctx.guild.id) == False:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        server = servers.find_one({"server": ctx.guild.id})
        il = server['economy']
        try:
            il['gl_shop'][str(id)]
        except KeyError:
            await ctx.send("–ü—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è id")
            return

        if key not in ['items', 'name', 'price', 'description', 'access_role', 'access_balance']:
            await ctx.send("–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —É–∫–∞–∂–∏—Ç–µ 1 –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: items, name, price, description, access_role, access_balance")
            return


        if key == 'items':

            al = []
            for i in args:
                al.append(i)

            items = []
            for id in al:
                try:
                    server['items'][str(id)]
                    items.append(id)
                except KeyError:
                    pass

            if len(items) != 0:
                il['gl_shop'][str(id)].update({f'{key}': items})
                servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

        elif key == 'name':
            if len(str(args)) > 50:
                await ctx.send("–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª—å—à–µ 150-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!")
                return

            il['gl_shop'][str(id)].update({f'{key}': len(str(args))})
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

        elif key == 'price':

            al = []
            for i in args:
                al.append(i)

            try:
                pr = int(al[0])
            except Exception:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É, —á–∏—Å–ª–æ!")
                return

            if pr < 0:
                await ctx.send("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!")
                return

            il['gl_shop'][str(id)].update({f'{key}': pr})
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})


        elif key == 'description':
            if len(str(args)) > 150:
                await ctx.send("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 150-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!")
                return

            il['gl_shop'][str(id)].update({f'{key}': len(str(args))})
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

        elif key == 'access_role':
            al = []
            for i in args:
                al.append(i)

            try:
                role = ctx.guild.get_role(int(al[0]))
            except Exception:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏!")
                return

            il['gl_shop'][str(id)].update({f'{key}': role.id})
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

        elif key == 'access_balance':

            al = []
            for i in args:
                al.append(i)

            try:
                pr = int(al[0])
            except Exception:
                await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–∞, —á–∏—Å–ª–æ!")
                return

            if pr < 0:
                await ctx.send("–ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!")
                return

            il['gl_shop'][str(id)].update({f'{key}': pr})
            servers.update_one({'server':ctx.guild.id},{"$set":{'economy': il}})

        await ctx.send("–ü—Ä–æ–¥—É–∫—Ç –∏–∑–º–µ–Ω—ë–Ω!")


    @commands.command(usage = '[page]', description = '–ú–∞–≥–∞–∑–∏–Ω.', help = '–ú–∞–≥–∞–∑–∏–Ω')
    async def shop(self,ctx, numberpage:int = 1):

        server = servers.find_one({"server": ctx.guild.id})
        cc = server['economy']['currency']
        solutions = ['‚óÄ', '‚ñ∂', '‚ùå']
        member = ctx.author
        reaction = 'a'

        if server['economy']['gl_shop'] == {}:
            await ctx.send("–¢—É—Ç –ø—É—Å—Ç–æ!")
            return

        top = list(sorted(server['economy']['gl_shop'].items(),key=lambda x: x[1]['price'],reverse=True))

        if len(top) % 10 != 0:
            l = int(len(top) / 10 + 1)
        else:
            l = int(len(top) / 10)

        if numberpage > l or numberpage < 1:
            await ctx.send("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç!")
            return

        def embed(numberpage):
            nonlocal cc
            nonlocal l
            nonlocal ctx
            nonlocal server

            num1 = 0
            num2 = 0
            page = numberpage
            text = ''

            if numberpage != 1:
                numberpage *= 10
                numberpage -= 10

                if numberpage > 9:
                    numberpage += 1

            if len(top) <= 10:
                emb = discord.Embed(title = '–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤', description = f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ `{ctx.prefix}buy (id)`\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø—Ä–æ–ø–∏—à–∏—Ç–µ `{ctx.prefix}pr_info (id)`\nid —É–∫–∞–∑–∞–Ω –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞.',color=server['embed_color'])
                for i in top:
                    num1 += 1
                    if i[1]['description'] == None:
                        text = f"{cc}{i[1]['price']}"
                    else:
                        text = f"{cc}{i[1]['price']}\n{i[1]['description']}"
                    emb.add_field(name = f"ID {i[0]} | {i[1]['name']}", value = text, inline = True)


            elif len(top) > 10:
                emb = discord.Embed(title = '–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤', description = f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ `{ctx.prefix}buy (id)`\n–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø—Ä–æ–ø–∏—à–∏—Ç–µ `{ctx.prefix}pr_info (id)`\nid —É–∫–∞–∑–∞–Ω –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞.',color=server['embed_color'])
                for i in top:
                    num1 += 1
                    if num1 >= numberpage and num2 < 10:
                        num2 += 1
                        if i[1]['description'] == None:
                            text = f"{cc}{i[1]['price']}"
                        else:
                            text = f"{cc}{i[1]['price']}\n{i[1]['description']}"
                        emb.add_field(name = f"ID {i[0]} | {i[1]['name']}", value = text, inline = True)

            emb.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{l}")

            return emb

        msg = await ctx.send(embed = embed(numberpage))

        def check( reaction, user):
            nonlocal msg
            return user == ctx.author and str(reaction.emoji) in solutions and str(reaction.message) == str(msg)

        async def rr():
            nonlocal reaction
            nonlocal numberpage
            nonlocal l
            if str(reaction.emoji) == '‚óÄ':
                await msg.remove_reaction('‚óÄ', member)
                numberpage -= 1
                if numberpage < 1:
                    numberpage = 1

                await msg.edit(embed = embed(numberpage))


            elif str(reaction.emoji) == '‚ñ∂':
                await msg.remove_reaction('‚ñ∂', member)
                numberpage += 1
                if numberpage > l:
                    numberpage = l

                await msg.edit(embed = embed(numberpage))

            elif str(reaction.emoji) == '‚ùå':
                await msg.clear_reactions()
                return

        async def reackt():
            nonlocal reaction
            try:
                reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check = check)
            except asyncio.TimeoutError:
                await msg.clear_reactions()
            else:
                await rr(), await reackt()

        for x in solutions:
            await msg.add_reaction(x)
        await reackt()

    @commands.command(usage = '(id)', description = '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.', help = '–ú–∞–≥–∞–∑–∏–Ω', aliases = ['–∫—É–ø–∏—Ç—å'])
    async def buy(self,ctx, id:int):
        server = servers.find_one({"server": ctx.guild.id})
        list_keys = list(server['economy']['gl_shop'].keys())
        if str(id) not in list_keys:
            await ctx.send("–ü—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            return

        product = server['economy']['gl_shop'][str(id)]
        items = []
        for i in product['items']:
            items.append(i)
        user = funs.user_check(ctx.author, ctx.guild)

        if user['money'] < product['price']:
            await ctx.send(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {server['economy']['currency']}–º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!")
            return

        if product['access_role'] != None:
            role = ctx.guild.get_role(product['access_role'])
            if role not in ctx.author.roles:
                await ctx.send(f"–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ {role.name} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!")
                return

        if product['access_balance'] != None:
            if product['access_balance'] > user['money']:
                await ctx.send(f"–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–º–µ—è –±–∞–ª–∞–Ω—Å >= {server['economy']['currency']}{product['access_balance']}")
                return

        user['money'] = user['money'] - product['price']
        if funs.user_update(ctx.author.id, ctx.guild, 'money', user['money']) == True:
            for i in product['items']:
                user['inv'].append(funs.creat_item(ctx.guild.id, i))

            if funs.user_update(ctx.author.id, ctx.guild, 'inv', user['inv']) == True:
                await ctx.send(f"–ü—Ä–æ–¥—É–∫—Ç –±—ã–ª –∫—É–ø–ª–µ–Ω!")

    @commands.command(usage = '(id)', description = '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.', help = '–ú–∞–≥–∞–∑–∏–Ω')
    async def pr_info(self,ctx, id:int):
        server = servers.find_one({"server": ctx.guild.id})
        list_keys = list(server['economy']['gl_shop'].keys())
        if str(id) not in list_keys:
            await ctx.send("–ü—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            return

        product = server['economy']['gl_shop'][str(id)]
        user = funs.user_check(ctx.author, ctx.guild)

        if len(product['items']) == 1:

            item = server['items'][str(product['items'][0])]

            ttype = item['type']
            ttype = ttype.replace('eat', f'üçñ | –ï–¥–∞')
            ttype = ttype.replace('point', f'<:mana:780352235246452756> | –ó–µ–ª—å–µ')
            ttype = ttype.replace('case', f'<:chest:827218232783405097> | –°—É–Ω–¥—É–∫ —Å–æ–∫—Ä–æ–≤–∏—â')
            ttype = ttype.replace('armor', f'<:armor:827220888130682880> | –ë—Ä–æ–Ω—è')
            ttype = ttype.replace('pet', f'<:pet:780381475207905290> | –ü–∏—Ç–æ–º–µ—Ü')
            ttype = ttype.replace('material', f'<:leather:783036521099034626> | –ú–∞—Ç–µ—Ä–∏–∞–ª')
            ttype = ttype.replace('recipe', f'<:recipe:827221967886745600> | –†–µ—Ü–µ–ø—Ç')
            ttype = ttype.replace('role', f'<:icons8pokeball96:779718625459437608> | –†–æ–ª—å')

            quality = item['quality']
            if quality == 'n':
                quality = '<:normal_q:781531816993620001>'
            elif quality == 'u':
                quality = '<:unusual_q:781531868780691476>'
            elif quality == 'r':
                quality = '<:rare_q:781531919140651048>'
            elif quality == 'o':
                quality = '<:orate_q:781531996866084874>'
            elif quality == 'l':
                quality = '<:legendary_q:781532085130100737>'

            if item['type']== 'eat':
                act_title = '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'

            if item['type'] == 'point':
                if item['style'] == 'heal':
                    act_title = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'
                if item['style'] == 'mana':
                    act_title = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã'

            if item['type'] == 'case':
                act_title = '–°—É–Ω–¥—É–∫ —É–¥–∞—á–∏'

            if item['type'] == 'armor':
                if item['style'] == 'add':
                    act_title = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏'
                if item['style'] == 'set':
                    act_title = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–æ–Ω–∏'

            if item['type'] == 'weapon':
                act_title = '–£—Ä–æ–Ω'

            if item['type'] == 'pet':
                style = item['style']
                if style == 'hp+':
                    act_title = '–ë–æ–Ω—É—Å –∫ –∑–¥–æ—Ä–æ–≤—å—é'
                if style == 'mana+':
                    act_title = '–ë–æ–Ω—É—Å –∫ –º–∞–Ω–µ'
                if style == 'damage+':
                    act_title = '–ë–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É'
                if style == 'armor+':
                    act_title = '–ë–æ–Ω—É—Å –∫ –∑–∞—â–∏—Ç–µ'
                if style == 'heal+':
                    act_title = '–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è'
                if style == 'mn+':
                    act_title = '–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω—ã'

            if item['type'] == 'recipe':
                act_title = '–†–µ—Ü–µ–ø—Ç'
                act  = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {product['items']}\n–°–æ–∑–¥–∞—ë—Ç: {server['items'][str(product['create']['name'])]}"

            if item['type'] == 'role':
                if item['style'] == 'add':
                    act_title = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏'
                if item['style'] == 'remove':
                    act_title = '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏'

            emb = discord.Embed(title = f"–ü—Ä–æ–¥—É–∫—Ç | {product['name']}", description = f"–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: {ttype}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n–ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n{act_title}: {item['act']}\n–¶–µ–Ω–∞: {product['price']}\n–†–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏: <@&{product['access_role']}>\n–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {product['access_balance']}".replace('<@&None>', '-').replace('None', '0'), color=server['embed_color'])
            if item['image'] != 'none':
                emb.set_thumbnail(url = item['image'])
            if item['description'] != None:
                emb.add_field(name ='–û–ø–∏—Å–∞–Ω–∏–µ', value = item['description'], inline = False)

            await ctx.send(embed = emb)


        if len(product['items']) != 1:
            embeds = {}

            em = discord.Embed(title = f"–ü—Ä–æ–¥—É–∫—Ç | {product['name']}", description = f"–ü—Ä–æ–¥—É–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –æ–±—ä–µ–∫—Ç—ã —Å id: {', '.join(str(i) for i in product['items'])}\n–¶–µ–Ω–∞: {product['price']}\n–†–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏: <@&{product['access_role']}>\n–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {server['economy']['currency']}{product['access_balance']}".replace('<@&None>', '-').replace('None', '0'), color=server['embed_color'])

            embeds.update({ '1' : em})

            for i in product['items']:
                print(i)
                item = server['items'][str(i)]

                type = item['type']
                ttype = item['type']
                ttype = ttype.replace('eat', f'üçñ | –ï–¥–∞')
                ttype = ttype.replace('point', f'<:mana:780352235246452756> | –ó–µ–ª—å–µ')
                ttype = ttype.replace('case', f'<:chest:827218232783405097> | –°—É–Ω–¥—É–∫ —Å–æ–∫—Ä–æ–≤–∏—â')
                ttype = ttype.replace('armor', f'<:armor:827220888130682880> | –ë—Ä–æ–Ω—è')
                ttype = ttype.replace('pet', f'<:pet:780381475207905290> | –ü–∏—Ç–æ–º–µ—Ü')
                ttype = ttype.replace('material', f'<:leather:783036521099034626> | –ú–∞—Ç–µ—Ä–∏–∞–ª')
                ttype = ttype.replace('recipe', f'<:recipe:827221967886745600> | –†–µ—Ü–µ–ø—Ç')
                ttype = ttype.replace('role', f'<:icons8pokeball96:779718625459437608> | –†–æ–ª—å')

                quality = item['quality']
                if quality == 'n':
                    quality = '<:normal_q:781531816993620001>'
                elif quality == 'u':
                    quality = '<:unusual_q:781531868780691476>'
                elif quality == 'r':
                    quality = '<:rare_q:781531919140651048>'
                elif quality == 'o':
                    quality = '<:orate_q:781531996866084874>'
                elif quality == 'l':
                    quality = '<:legendary_q:781532085130100737>'

                if item['type']== 'eat':
                    act_title = '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'

                if item['type'] == 'point':
                    if item['style'] == 'heal':
                        act_title = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'
                    if item['style'] == 'mana':
                        act_title = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã'

                if item['type'] == 'case':
                    act_title = '–°—É–Ω–¥—É–∫ —É–¥–∞—á–∏'

                if item['type'] == 'armor':
                    if item['style'] == 'add':
                        act_title = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏'
                    if item['style'] == 'set':
                        act_title = '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–æ–Ω–∏'

                if item['type'] == 'weapon':
                    act_title = '–£—Ä–æ–Ω'

                if item['type'] == 'pet':
                    style = item['style']
                    if style == 'hp+':
                        act_title = '–ë–æ–Ω—É—Å –∫ –∑–¥–æ—Ä–æ–≤—å—é'
                    if style == 'mana+':
                        act_title = '–ë–æ–Ω—É—Å –∫ –º–∞–Ω–µ'
                    if style == 'damage+':
                        act_title = '–ë–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É'
                    if style == 'armor+':
                        act_title = '–ë–æ–Ω—É—Å –∫ –∑–∞—â–∏—Ç–µ'
                    if style == 'heal+':
                        act_title = '–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è'
                    if style == 'mn+':
                        act_title = '–ë–æ–Ω—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω—ã'

                if item['type'] == 'recipe':
                    act_title = '–†–µ—Ü–µ–ø—Ç'
                    ct = act
                    act  = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {ct['items']}\n–°–æ–∑–¥–∞—ë—Ç: {server['items'][str(ct['create']['name'])]}"

                if item['type'] == 'role':
                    if item['style'] == 'add':
                        act_title = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏'
                    if item['style'] == 'remove':
                        act_title = '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏'

                emb = discord.Embed(title = f"–ü—Ä–æ–¥—É–∫—Ç | {product['name']}", description = f"–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: {ttype}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n–ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n{act_title}: {item['act']}", color=server['embed_color'])
                if item['image'] != 'none':
                    emb.set_thumbnail(url = item['image'])
                if item['description'] != None:
                    emb.add_field(name ='–û–ø–∏—Å–∞–Ω–∏–µ', value = item['description'], inline = False)



                l = int(max(embeds.keys()))+1

                embeds.update({ str(l) : emb})

            msg = await ctx.send(embed = embeds['1'].set_footer(text = f'1 \ {l} | –ü–æ–∫—É–ø–∫–∞ üõí | –ü—Ä–æ—Å–º–æ—Ç—Ä ‚óÄ ‚ñ∂'))
            solutions = ['‚óÄ', 'üõí', '‚ñ∂', '‚ùå']
            member = ctx.author
            reaction = 'a'
            numberpage = 1

            def check( reaction, user):
                nonlocal msg
                return user == ctx.author and str(reaction.emoji) in solutions and str(reaction.message) == str(msg)

            async def rr(reaction):
                nonlocal numberpage
                nonlocal ctx
                nonlocal server
                nonlocal product
                nonlocal embeds
                if str(reaction.emoji) == '‚óÄ':
                    await msg.remove_reaction('‚óÄ', member)
                    numberpage -= 1
                    if numberpage < 1:
                        numberpage = int(max(embeds.keys()))

                    await msg.edit(embed = embeds[str(numberpage)].set_footer(text = f'{numberpage} \ {l} | –ü–æ–∫—É–ø–∫–∞ üõí | –ü—Ä–æ—Å–º–æ—Ç—Ä ‚óÄ ‚ñ∂') )
                    return True


                if str(reaction.emoji) == '‚ñ∂':
                    await msg.remove_reaction('‚ñ∂', member)
                    numberpage += 1
                    if numberpage > int(max(embeds.keys())):
                        numberpage = 1

                    await msg.edit(embed = embeds[str(numberpage)].set_footer(text = f'{numberpage} \ {l} | –ü–æ–∫—É–ø–∫–∞ üõí | –ü—Ä–æ—Å–º–æ—Ç—Ä ‚óÄ ‚ñ∂') )
                    return True

                elif str(reaction.emoji) == 'üõí':
                    await msg.remove_reaction('üõí', member)

                    items = []
                    for i in product['items']:
                        items.append(i)
                    user = funs.user_check(ctx.author, ctx.guild)

                    if user['money'] < product['price']:
                        await ctx.send(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {server['economy']['currency']}–º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!")
                        return True

                    if product['access_role'] != None:
                        role = ctx.guild.get_role(product['access_role'])
                        if role not in ctx.author.roles:
                            await ctx.send(f"–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ {role.name} –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!")
                            return True

                    if product['access_balance'] != None:
                        if product['access_balance'] > user['money']:
                            await ctx.send(f"–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–º–µ—è –±–∞–ª–∞–Ω—Å >= {server['economy']['currency']}{product['access_balance']}")
                            return True

                    user['money'] = user['money'] - product['price']
                    if funs.user_update(ctx.author.id, ctx.guild, 'money', user['money']) == True:
                        for i in product['items']:
                            user['inv'].append(funs.creat_item(ctx.guild.id, i))

                        if funs.user_update(ctx.author.id, ctx.guild, 'inv', user['inv']) == True:
                            await ctx.send(f"–ü—Ä–æ–¥—É–∫—Ç –±—ã–ª –∫—É–ø–ª–µ–Ω!")
                            return True


                if str(reaction.emoji) == '‚ùå':
                    await msg.clear_reactions()
                    return False

            async def reackt():
                nonlocal reaction
                try:
                    reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check = check)
                except asyncio.TimeoutError:
                    await msg.clear_reactions()
                else:
                    await rr(reaction), await reackt()

            for x in solutions:
                await msg.add_reaction(x)
            await reackt()


    @commands.command(usage = '-', description = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞.', help = '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', aliases = ['–µ–∂–µ–¥–Ω–µ–≤–∫–∞'])
    async def daily(self,ctx):
        user = funs.user_check(ctx.author, ctx.guild)
        server = servers.find_one({"server": ctx.guild.id})

        if user['cache']['week_act'][1] == None or user['cache']['week_act'][1]+1 == int(time.strftime("%j")):
            if user['cache']['week_act'][0] == 7:
                user['cache'].update({'week_act': [1, int(time.strftime("%j"))] })
                funs.user_update(ctx.author.id, ctx.guild, 'cache', user['cache'])
            else:
                user['cache'].update({'week_act': [user['cache']['week_act'][0]+1, int(time.strftime("%j"))] })
                funs.user_update(ctx.author.id, ctx.guild, 'cache', user['cache'])

        elif user['cache']['week_act'][1]+1 != int(time.strftime("%j")):
            user['cache'].update({'week_act': [1, int(time.strftime("%j"))] })
            funs.user_update(ctx.author.id, ctx.guild, 'cache', user['cache'])

        if len(server['economy']['daily_reward']) == 0:
            reward = 200
            reward_percent = 1.05
        else:
            reward = server['economy']['daily_reward']['reward']
            reward_percent = server['economy']['daily_reward']['reward_percent']

        url = f"https://ic.wampi.ru/2021/08/07/pizza_day_{user['cache']['week_act'][0]}.gif"

        if user['cache']['week_act'][0] == 1:
            u_r = int(reward)
            text = '<:heart:780373079439572993> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ö–æ—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∫ –Ω–∞–≥—Ä–∞–¥–µ!'
        else:
            u_r = int(reward * reward_percent * user['cache']['week_act'][0])
            text = f"<:icons8pokeball96:779718625459437608> –ë–æ–Ω—É—Å: —Ö{int(reward_percent * user['cache']['week_act'][0])}"

        emb = discord.Embed(title = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫", description = f"<:foot:779718609177411635> –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ –ø—Ä–∏–Ω—ë—Å –≤–∞–º: {u_r}{server['economy']['currency']}\n{text}", color=server['embed_color'])
        emb.set_image(url=url)
        await ctx.send(embed = emb)

        funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] + u_r)

    @commands.command(aliases = ['21point','21–æ—á–∫–æ'], usage = '(amout) [@member]', description = '–ò–≥—Ä–∞ "–°–æ–±–µ—Ä–∏ 21"', help = '–ò–≥—Ä—ã')
    async def blackjack(self,ctx, amout:int, member: discord.Member = None):
        user = funs.user_check(ctx.author, ctx.guild)
        if member != None:
            user2 = funs.user_check(member, ctx.guild)
            if user2['money'] < amout:
                await ctx.send(f'–£ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!')
                return
        server = servers.find_one({"server": ctx.guild.id})

        if amout < server['economy']['games']['blackjack']['mini'] or amout > server['economy']['games']['blackjack']['max']:
            await ctx.send(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –ø–µ—Ä–∏–æ–¥–µ —Å {server['economy']['games']['blackjack']['mini']} –¥–æ {server['economy']['games']['blackjack']['max']}")
            return

        if user['money'] < amout:
            await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!')
            return

        if ctx.author == member:
            member = None
        if member != None:
            solutions = ['‚úÖ', '‚ùå']
            reaction = 'a'
            msg = await ctx.send(f'{member.mention} –≤—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã —Å—ã–≥—Ä–∞—Ç—å –≤ `—Å–æ–±–µ—Ä–∏ 21`, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –¥–ª—è –Ω–∞—á–∞–ª–∞!')

            def check( reaction, user):
                nonlocal msg
                return user == member and str(reaction.emoji) in solutions and str(reaction.message) == str(msg)

            async def reackt():
                nonlocal reaction
                try:
                    reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check = check)
                except asyncio.TimeoutError:
                    await msg.clear_reactions()
                    return False
                else:
                    if str(reaction.emoji) == '‚úÖ':
                        await msg.clear_reactions()
                        return True

                    elif str(reaction.emoji) == '‚ùå':
                        await msg.clear_reactions()
                        return False

            for x in solutions:
                await msg.add_reaction(x)

            if await reackt() == True:
                try:
                    await msg.delete()
                except Exception:
                    pass
                pass
            else:
                try:
                    await msg.delete()
                except Exception:
                    pass
                return


        deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]*4
        random.shuffle(deck)

        def deal(deck):
            hand = []
            for i in range(2):
                random.shuffle(deck)
                card = deck.pop()
                if card == 11:card = "J"
                if card == 12:card = "Q"
                if card == 13:card = "K"
                if card == 14:card = "A"
                hand.append(card)
            return hand

        mem1_hand = []
        mem2_hand = []
        mem1_hand = deal(deck)
        mem2_hand = deal(deck)

        def total(hand):
            total = 0
            for card in hand:
                if card == "J" or card == "Q" or card == "K":
                    total += 10
                elif card == "A":
                    if total >= 11:
                        total += 1
                    else:
                        total += 11
                else:
                    total += int(card)
            return total

        def hit(hand):
            card = deck.pop()
            if card == 11:card = "J"
            if card == 12:card = "Q"
            if card == 13:card = "K"
            if card == 14:card = "A"
            hand.append(card)
            return hand

        def score(dealer_hand, player_hand):
            if total(player_hand) == 21:
                return 'player 1 win'
            elif total(dealer_hand) == 21:
                return 'player 2 win'
            elif total(player_hand) > 21:
                return 'player 2 win'
            elif total(dealer_hand) > 21:
                return 'player 1 win'
            else:
                return False

        def win_check(dealer_hand, player_hand):
            if total(player_hand) == 21:
                return 'player 1 win'
            elif total(dealer_hand) == 21:
                return 'player 2 win'
            elif total(player_hand) > 21:
                return 'player 2 win'
            elif total(dealer_hand) > 21:
                return 'player 1 win'
            elif total(player_hand) < total(dealer_hand):
                return 'player 2 win'
            elif total(player_hand) > total(dealer_hand):
                return 'player 1 win'
            elif total(player_hand) == total(dealer_hand):
                return 'friendship'
            else:
                return False

        def emb(feet = None):
            nonlocal member, ctx
            nonlocal mem1_hand, mem2_hand
            nonlocal server
            emb = discord.Embed(title = "–°–æ–±–µ—Ä–∏ 21", description = '–¶–µ–ª—å —Å–æ–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏ –æ–±—ã–≥—Ä–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ `hit` –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É, `stand` –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.', color=server['embed_color'])
            if member == None:
                pl2 = '–ë–æ—Ç-–î–∏–ª–µ—Ä'
            else:
                pl2 = member.name
            h2 = ", ".join(str(i) for i in mem2_hand)
            h1 = ", ".join(str(i) for i in mem1_hand)
            emb.add_field(name = f'–ò–≥—Ä–æ–∫ 2: {pl2}', value = f'–ö–∞—Ä—Ç—ã: {h2}\n–û—á–∫–∏: {total(mem2_hand)}')
            emb.add_field(name = f'–ò–≥—Ä–æ–∫ 1: {ctx.author.name}', value = f'–ö–∞—Ä—Ç—ã: {h1}\n–û—á–∫–∏: {total(mem1_hand)}')
            if win_check(mem2_hand, mem1_hand) != False:
                if feet == None:
                    if win_check(mem2_hand, mem1_hand) == 'player 1 win':
                        win = ctx.author.mention
                    if win_check(mem2_hand, mem1_hand) == 'player 2 win':
                        win = pl2
                    if win_check(mem2_hand, mem1_hand) == 'friendship':
                        win = '–î—Ä—É–∂–±–∞'
                    emb.add_field(name = f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', value = f'{win}')
            if feet != None:
                emb.add_field(name = f'–•–æ–¥ –∏–≥—Ä–æ–∫–∞', value = f'{feet}')
            return emb

        message = await ctx.send(embed = emb())

        async def game_bot():
            nonlocal member, ctx
            nonlocal mem1_hand, mem2_hand
            try:
                await message.edit(embed = emb('–ò–≥—Ä–æ–∫ 1'))
                msg = await self.bot.wait_for('message', timeout=20.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
            except asyncio.TimeoutError:
                await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
                pass
            else:

                try:
                    await msg.delete()
                except Exception:
                    pass

                if msg.content == 'hit':
                    mem1_hand = hit(mem1_hand)
                    if score(mem2_hand, mem1_hand) == 'player 1 win' or score(mem2_hand, mem1_hand) == 'player 2 win':
                        return

            await message.edit(embed = emb('–ò–≥—Ä–æ–∫ 2'))
            while total(mem2_hand) < total(mem1_hand):
                mem2_hand = hit(mem2_hand)
                if score(mem2_hand, mem1_hand) == 'player 1 win' or score(mem2_hand, mem1_hand) == 'player 2 win':
                    return

        async def game_2_players():
            nonlocal member, ctx
            nonlocal mem1_hand, mem2_hand
            for i in range(2):
                if score(mem2_hand, mem1_hand) == False:
                    try:
                        await message.edit(embed = emb('–ò–≥—Ä–æ–∫ 1'))
                        msg = await self.bot.wait_for('message', timeout=20.0, check=lambda message: message.author == ctx.author and message.channel.id == ctx.channel.id)
                    except asyncio.TimeoutError:
                        await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 1")
                        pass
                    else:
                        try:
                            await msg.delete()
                        except Exception:
                            pass

                        if msg.content == 'hit':
                            mem1_hand = hit(mem1_hand)
                else:
                    return

                if score(mem2_hand, mem1_hand) == False:
                    try:
                        await message.edit(embed = emb('–ò–≥—Ä–æ–∫ 2'))
                        msg = await self.bot.wait_for('message', timeout=20.0, check=lambda message: message.author == member and message.channel.id == ctx.channel.id)
                    except asyncio.TimeoutError:
                        await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2")
                        pass
                    else:
                        try:
                            await msg.delete()
                        except Exception:
                            pass

                        if msg.content == 'hit':
                            mem2_hand = hit(mem2_hand)
                else:
                    return

        if win_check(mem2_hand, mem1_hand) != 'player 1 win' or win_check(mem2_hand, mem1_hand) != 'player 2 win':
            if member == None:
                funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] - amout )
                await game_bot()
            else:
                funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] - amout )
                funs.user_update(member.id, ctx.guild, 'money', user2['money'] - amout)
                await game_2_players()

        await message.edit(embed = emb())

        if win_check(mem2_hand, mem1_hand) == 'player 1 win':
            if member == None:
                funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] + int(amout * server['economy']['games']['blackjack']['percent']))
                await ctx.send(f"–ù–∞–≥—Ä–∞–¥–∞ {int(amout * server['economy']['games']['blackjack']['percent'])}{server['economy']['currency']}")
            if member != None:
                funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] + int(amout * server['economy']['games']['blackjack']['percent']))
                await ctx.send(f"–ò–≥—Ä–æ–∫ 1 –≤—ã–π–≥—Ä–∞–ª {int(amout * server['economy']['games']['blackjack']['percent'])}")

        if win_check(mem2_hand, mem1_hand) == 'player 2 win':
            if member == None:
                pass
            if member != None:
                funs.user_update(member.id, ctx.guild, 'money', user2['money'] + int(amout * server['economy']['games']['blackjack']['percent']) )
                await ctx.send(f"–ò–≥—Ä–æ–∫ 2 –≤—ã–π–≥—Ä–∞–ª {int(amout * server['economy']['games']['blackjack']['percent'] )}")

        if win_check(mem2_hand, mem1_hand) == 'friendship':
            pass

    @commands.command(usage = '(amout) [repets]', description = '–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã.', help = '–ò–≥—Ä—ã', aliases = ['—Å–ª–æ—Ç—ã'])
    async def slots(self,ctx, amout:int, repet:int = 1):
        user = funs.user_check(ctx.author, ctx.guild)
        server = servers.find_one({"server": ctx.guild.id})
        if user['money'] < amout * repet:
            await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!')
            return

        if amout < server['economy']['games']['blackjack']['mini'] or amout > server['economy']['games']['blackjack']['max']:
            await ctx.send(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –ø–µ—Ä–∏–æ–¥–µ —Å {server['economy']['games']['blackjack']['mini']} –¥–æ {server['economy']['games']['blackjack']['max']}")
            return

        if repet < 0:
            await ctx.send('–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–≥—Ä –±–æ–ª—å—à–µ 0!')

        ar = amout * repet
        funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] - ar)

        def r(list, n1, n2, n3):
            if list[n1] == list[n2] and list[n2] == list[n3]:
                return True
            else:
                return False

        slots = ['üç°','üç¨','üçß','üç≠','üç±','üç´','üç©']*5
        random.shuffle(slots)

        if repet == 1:
            user_slots = []
            for i in range(9):
                user_slots += slots.pop()

            s = user_slots
            win = False
            p_win = False
            if r(user_slots, 3,4,5) == True:
                win = True
            elif r(user_slots, 0,3,6) == True:
                win = True
            elif r(user_slots, 1,4,7) == True:
                win = True
            elif r(user_slots, 2,5,8) == True:
                win = True
            elif r(user_slots, 0,1,2) == True:
                win = True
            elif r(user_slots, 6,7,8) == True:
                win = True
            elif r(user_slots, 0,4,8) == True:
                win = True
            elif r(user_slots, 2,4,6) == True:
                win = True

            text = f'[  |  SLOTS  |  ]\n {s[0]} | {s[1]} | {s[2]} \n\n {s[3]} | {s[4]} | {s[5]} \n\n {s[6]} | {s[7]} | {s[8]} \n| -------------- |\n\n'

            if win == True:
                text += f"–í—ã —Å–æ—Ä–≤–∞–ª–∏ –∫—É—à! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int(amout * server['economy']['games']['slots']['percent'])}{server['economy']['currency']}"

                funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] - ar + int(amout * server['economy']['games']['slots']['percent']))

            else:
                text += '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!'

            await ctx.send(text)

        if repet > 1:
            wins = 0
            p_wins = 0
            u_money = 0 #amout * repet
            for i in range(repet):
                slots = ['üç°','üç¨','üçß','üç≠','üç±','üç´','üç©']*5
                random.shuffle(slots)
                user_slots = []
                for i in range(9):
                    user_slots += slots.pop()

                if r(user_slots, 3,4,5) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 0,3,6) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 1,4,7) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 2,5,8) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 0,1,2) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 6,7,8) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 0,4,8) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])
                elif r(user_slots, 2,4,6) == True:
                    wins += 1
                    u_money += int(amout * server['economy']['games']['slots']['percent'])

            emd = discord.Embed(title = f"–°–ª–æ—Ç—ã", description = f"–ü–æ–±–µ–¥: {wins}\n–ü—Ä–æ–∏–≥—Ä—ã—à–∏: {repet - wins - p_wins}\n–í–æ–∑—Ä–∞—Ç –º–æ–Ω–µ—Ç: {u_money}", color=server['embed_color'])
            await ctx.send(embed = emd)
            funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] - ar + u_money)

    @commands.command(usage = '(number) (money) (@member)', description = '–ò–≥—Ä–∞ –≤ —à–∞–Ω—Å.', help = '–ò–≥—Ä—ã', aliases = ['—à–∞–Ω—Å', 'duel'])
    async def chance(self, ctx, number:int = None, money:int = None, member:discord.Member = None ):

        if member == None:
            await ctx.send("–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return

        kk = self.bot.get_emoji(778533802342875136)
        user = funs.user_check(ctx.author, ctx.guild)
        mem = funs.user_check(member, ctx.guild)
        server = servers.find_one({"server": ctx.guild.id})
        if number == None or money == None or member == None:
            emb = discord.Embed(description = f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: \n`{ctx.prefix}duel (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100) (—Å—Ç–∞–≤–∫–∞ –æ—Ç 10 –¥–æ 100–∫) (@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)`', color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return

        if number > 100 or number < 1 or number == None:
            emb = discord.Embed(description = f'–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100', color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return

        if money < server['economy']['games']['chance']['mini'] or money > server['economy']['games']['chance']['max'] or money == None:
            emb = discord.Embed(description = f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –æ—Ç {server['economy']['games']['chance']['mini']} –¥–æ {server['economy']['games']['chance']['max']}", color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return

        if money > user['money']:
            emb = discord.Embed(description = f'–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ–∫', color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return

        if money > mem['money']:
            emb = discord.Embed(description = f'–£ {member.mention} –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç–æ–∫', color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return

        if ctx.author == member:
            emb = discord.Embed(description = f'–ò–≥—Ä–∞ –≤ —à–∞–Ω—Å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω', color=server['embed_color'])

            try:
                emb.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
            except:
                emb.set_author(name = f'{ctx.author}')

            await ctx.send(embed = emb)
            return


        solutions = ['‚úî', '‚ùå']
        reaction = 'a'
        emb2 = discord.Embed(description = f'<@{member.id}> –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —à–∞–Ω—Å –æ—Ç <@{ctx.author.id}>?', color=server['embed_color'])
        try:
            emb2.set_author(name = f'{ctx.author}', icon_url = f'{ctx.author.avatar.url}')
        except:
            emb2.set_author(name = f'{ctx.author}')

        async def text():
            nonlocal mess
            nonlocal number
            nonlocal user
            nonlocal server
            await mess.clear_reactions()
            emb3 = discord.Embed(description = f'<@{member.id}> –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç `1 –¥–æ 100`', color=server['embed_color'])
            try:
                emb3.set_author(name = f'{member.author}', icon_url = f'{member.author.avatar.url}')
            except:
                emb3.set_author(name = f'{member.author}')

            emb3.set_footer(text='–í —á–∞—Ç –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥')
            await mess.edit(embed = emb3)

            try:
                msg = await self.bot.wait_for('message', timeout=30.0, check=lambda message: message.author == member)
            except asyncio.TimeoutError:
                emb5 = discord.Embed(description = f'–í—Ä–µ–º—è –≤—ã—à–ª–æ', color=server['embed_color'])
                await mess.edit(embed = emb5)
                return
            else:
                try:
                    number2 = int(msg.content)
                except Exception:
                    await ctx.send('–£–∫–∞–∂–∏—Ç–µ __—á–∏—Å–ª–æ__!')
                    return

                if number2 < int(101) and number2 > int(0) or number2 != number2:
                    funs.user_update(ctx.author.id, ctx.guild, 'money', user['money'] -money)
                    funs.user_update(member.id, ctx.guild, 'money', mem['money'] -money)

                    r1 = random.randint(1,100)
                    emb4 = discord.Embed(title = '–®–∞–Ω—Å', color=server['embed_color']).add_field(name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:', value = f"–ò–º—è: <@{ctx.author.id}>\n –ß–∏—Å–ª–æ: {number}"
                    ).set_thumbnail(url ="https://thumbs.gfycat.com/PlasticTestyBushbaby-size_restricted.gif")
                    emb4.add_field(name = f'–ö–æ—Ç–∏–∫', value = f"–ö–æ—Ç–∏–∫ –≤—ã–±—Ä–∞–ª —á–∏—Å–ª–æ: {r1}")
                    emb4.add_field(name = f'–î—É—ç–ª—è–Ω—Ç:', value = f"–ò–º—è: <@{member.id}>\n –ß–∏—Å–ª–æ: {msg.content}")

                    if number > r1:
                        number = number - r1
                    else:
                        number = r1 - number

                    if number2 > r1:
                        number2 = number2 - r1
                    else:
                        number2 = r1 - number2

                    if number2 < number:
                        emb4.add_field(name = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ",value = f'<@{member.id}>\n –í—ã–π–≥—Ä—ã—à: {money} –º–æ–Ω–µ—Ç–æ–∫{kk}', inline = False)
                        funs.user_update(member.id, ctx.guild, 'money', mem['money'] + money*2)
                    else:
                        emb4.add_field(name = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ",value = f'<@{ctx.author.id}>\n –í—ã–π–≥—Ä—ã—à: {money} –º–æ–Ω–µ—Ç–æ–∫{kk}', inline = False)
                        funs.user_update( ctx.author.id, ctx.guild, 'money', mem['money'] + money*2)

                    await mess.edit(embed = emb4)


                else:
                    await ctx.send('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0-–ª—è –∏ –º–µ–Ω—å—à–µ 100-—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —á–∏—Å–ª–æ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!')
                    return


        def check( reaction, user):
            nonlocal mess
            return user == member and str(reaction.emoji) in solutions and str(reaction.message) == str(mess)

        async def rr():
            nonlocal reaction
            if str(reaction.emoji) == '‚úî':
                await mess.remove_reaction('‚úî', member)
                await text()
                pass

            elif str(reaction.emoji) == '‚ùå':
                await mess.clear_reactions()
                return

        async def reackt():
            nonlocal reaction
            try:
                reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check = check)
            except asyncio.TimeoutError:
                await mess.clear_reactions()
            else:
                await rr()


        mess = await ctx.send(embed = emb2)

        for x in solutions:
            await mess.add_reaction(x)

        await reackt()




def setup(bot):
    bot.add_cog(economy(bot))
